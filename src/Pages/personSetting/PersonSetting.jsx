import React, { useState, useEffect } from "react";
import "./PersonSetting.scss";
import usePeople from "../../API/usePeople";
import axiosInstance from "../../API/axiosInstance";
import Loader from '../../Component/Loader'

const PersonSetting = () => {
  const { person: initialPeople, isLoadingTop: initialPeopleLoad } =
    usePeople();
  const [people, setPeople] = useState([]);
  const [filteredPeople, setFilteredPeople] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [editStates, setEditStates] = useState({});
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [newUser, setNewUser] = useState({
    name: "",
    group: "",
    phone: "",
    email: "", // –î–æ–±–∞–≤—å —ç—Ç–æ –ø–æ–ª–µ
    role: "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
  });
  const [error, setError] = useState(null);

  const handleAddUser = async () => {
    try {
      const payload = {
        first_name: newUser.firstName,
        last_name: newUser.lastName,
        password: "password123",
        password_confirmation: "password123",
        is_admin: newUser.role === "–ê–¥–º–∏–Ω",
        group: newUser.group || null,
        avatar: null,
        phone: newUser.phone, // –î–æ–±–∞–≤—å —ç—Ç–æ
        email: newUser.email, // –î–æ–±–∞–≤—å —ç—Ç–æ
      };

      const response = await axiosInstance.post("/register", payload);

      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", response.data);

      setPeople((prev) => [
        ...prev,
        {
          ...response.data.user,
          role: payload.is_admin ? "–ê–¥–º–∏–Ω" : "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
          rating: 0,
        },
      ]);

      setIsModalOpen(false);
      setNewUser({
        name: "",
        group: "",
        phone: "",
        email: "", // –î–æ–±–∞–≤—å —ç—Ç–æ
        role: "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        firstName: "",
        lastName: "",
        middleName: "",
      });
      setError(null);
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        error.response?.data || error.message
      );
      setError(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
    }
  };

  useEffect(() => {
    if (initialPeople) {
      const mappedPeople = initialPeople.map((person) => ({
        ...person,
        role: person.is_admin ? "–ê–¥–º–∏–Ω" : "–°—Ç–∞–Ω–¥–∞—Ä—Ç",
        rating: person.rating || 0,
      }));
      setPeople(mappedPeople);
      setFilteredPeople(mappedPeople);
    }
  }, [initialPeople]);

  useEffect(() => {
    if (searchTerm === "") {
      setFilteredPeople(people);
    } else {
      const filtered = people.filter((person) =>
        `${person.first_name} ${person.last_name} ${person.middle_name || ""}`
          .toLowerCase()
          .includes(searchTerm.toLowerCase())
      );
      setFilteredPeople(filtered);
    }
  }, [searchTerm, people]);

  const handleEditClick = (id) => {
    setEditStates((prev) => ({
      ...prev,
      [id]: true,
    }));
  };

  const handleRatingChange = (id, value) => {
    setPeople((prev) =>
      prev.map((person) =>
        person.id === id ? { ...person, rating: Number(value) } : person
      )
    );
  };

  const handleSaveRating = async (id) => {
    try {
      const person = people.find((p) => p.id === id);
      const response = await axiosInstance.put(`/users/${id}`, {
        rating: person.rating,
      });

      console.log(`–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} –æ–±–Ω–æ–≤–ª–µ–Ω`, response.data);

      setEditStates((prev) => ({
        ...prev,
        [id]: false,
      }));

      setError(null);
    } catch (error) {
      console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:", error);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      setPeople((prev) =>
        prev.map((p) =>
          p.id === id
            ? {
                ...p,
                rating: initialPeople.find((ip) => ip.id === id)?.rating || 0,
              }
            : p
        )
      );
    }
  };

  const handleBlur = (id) => {
    setTimeout(() => {
      setEditStates((prev) => ({
        ...prev,
        [id]: false,
      }));
    }, 200);
  };

  const handleRoleChange = async (id, newRole) => {
    try {
      const isAdmin = newRole === "–ê–¥–º–∏–Ω";
      await axiosInstance.put(`/users/${id}`, {
        is_admin: isAdmin,
      });

      setPeople((prev) =>
        prev.map((person) =>
          person.id === id
            ? { ...person, role: newRole, is_admin: isAdmin }
            : person
        )
      );
      console.log(`–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newRole}`);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏:", error);
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  };

  const handleDeleteUser = async (id) => {
    const confirmation = prompt(
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –í–≤–µ–¥–∏—Ç–µ "–¥–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:'
    );
    if (confirmation?.toLowerCase() === "–¥–∞") {
      try {
        await axiosInstance.delete(`/users/${id}`);

        setPeople((prev) => prev.filter((person) => person.id !== id));
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} —É–¥–∞–ª–µ–Ω`);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
        setError(
          "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        );
      }
    } else {
      console.log("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
    }
  };

  if(initialPeopleLoad) return <Loader/>

  return (
    <section className="person-setting">
      <header className="header">
        <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏</h2>
        <div className="header-controls">
          <div className="search-container">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="search-input"
            />
            <span className="search-icon">üîç</span>
          </div>
          <button className="add-btn" onClick={() => setIsModalOpen(true)}>
            –î–æ–±–∞–≤–∏—Ç—å
          </button>
        </div>
      </header>

      {error && <div className="error-message">{error}</div>}

      <ul className="people-list">
        {filteredPeople.map((person) => (
          <li className="person-card" key={person.id}>
            <div className="person-info">
              <img src={person.image || "/img/kot.jpg"} alt="Ava" />
              <div>
                <h3>
                  {person.first_name} {person.last_name}
                </h3>
                <p>{person.middle_name || ""}</p>
              </div>
            </div>

            <div className="person-controls">
              <div className="rating-edit">
                <input
                  type="number"
                  value={person.rating}
                  onChange={(e) =>
                    handleRatingChange(person.id, e.target.value)
                  }
                  onFocus={() => handleEditClick(person.id)}
                  onBlur={() => handleBlur(person.id)}
                />
                {editStates[person.id] && (
                  <button
                    className="save-btn"
                    onClick={() => handleSaveRating(person.id)}
                    onMouseDown={(e) => e.preventDefault()}
                  >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </button>
                )}
              </div>

              <div className="buttons">
                <select
                  value={person.role}
                  onChange={(e) => handleRoleChange(person.id, e.target.value)}
                >
                  <option value="–ê–¥–º–∏–Ω">–ê–¥–º–∏–Ω</option>
                  <option value="–°—Ç–∞–Ω–¥–∞—Ä—Ç">–°—Ç–∞–Ω–¥–∞—Ä—Ç</option>
                </select>
                <button
                  className="delete-btn"
                  onClick={() => handleDeleteUser(person.id)}
                >
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          </li>
        ))}
      </ul>

      {isModalOpen && (
        <article className="modal-overlay">
          <section className="modal">
            <h2>–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞</h2>

            <div className="input-row">
              <div>
                <label>–§–∞–º–∏–ª–∏—è</label>
                <input
                  type="text"
                  value={newUser.lastName || ""}
                  onChange={(e) =>
                    setNewUser({ ...newUser, lastName: e.target.value })
                  }
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                />
              </div>
              <div>
                <label>–ò–º—è</label>
                <input
                  type="text"
                  value={newUser.firstName || ""}
                  onChange={(e) =>
                    setNewUser({ ...newUser, firstName: e.target.value })
                  }
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                />
              </div>
              <div>
                <label>–û—Ç—á–µ—Å—Ç–≤–æ</label>
                <input
                  type="text"
                  value={newUser.middleName || ""}
                  onChange={(e) =>
                    setNewUser({ ...newUser, middleName: e.target.value })
                  }
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ"
                />
              </div>
            </div>

            <div className="input-row">
              <div>
                <label>Email</label>
                <input
                  type="email"
                  value={newUser.email}
                  onChange={(e) =>
                    setNewUser({ ...newUser, email: e.target.value })
                  }
                  placeholder="example@domain.com"
                />
              </div>
              <div>
                <label>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</label>
                <input
                  type="text"
                  value={newUser.phone}
                  onChange={(e) =>
                    setNewUser({ ...newUser, phone: e.target.value })
                  }
                  placeholder="8(999) 999-99-99"
                />
              </div>
            </div>

            <div className="input-row">
              <div>
                <label>–ì—Ä—É–ø–ø–∞</label>
                <input
                  type="text"
                  value={newUser.group}
                  onChange={(e) =>
                    setNewUser({ ...newUser, group: e.target.value })
                  }
                  placeholder="–ü–ò-22-1"
                />
              </div>
              <div>
                <label>–°—Ç–∞—Ç—É—Å</label>
                <select
                  value={newUser.role}
                  onChange={(e) =>
                    setNewUser({ ...newUser, role: e.target.value })
                  }
                  className="status-select"
                >
                  <option value="–ê–¥–º–∏–Ω">–ê–¥–º–∏–Ω</option>
                  <option value="–°—Ç–∞–Ω–¥–∞—Ä—Ç">–£—á–∞—Å—Ç–Ω–∏–∫</option>
                </select>
              </div>
            </div>

            <div className="modal-actions">
              <button
                className="cancel-btn"
                onClick={() => setIsModalOpen(false)}
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
              <button className="confirm-btn" onClick={handleAddUser}>
                –î–æ–±–∞–≤–∏—Ç—å
              </button>
            </div>
          </section>
        </article>
      )}
    </section>
  );
};

export default PersonSetting;
